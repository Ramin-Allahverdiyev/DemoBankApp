package com.example.demoBankApp.mapper;

import com.example.demoBankApp.dto.request.AccountRequest;
import com.example.demoBankApp.dto.response.AccountResponse;
import com.example.demoBankApp.entity.Account;
import com.example.demoBankApp.entity.Authority;
import com.example.demoBankApp.entity.Branch;
import com.example.demoBankApp.entity.Client;
import java.util.ArrayList;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Set;
import javax.annotation.processing.Generated;

@Generated(
    value = "org.mapstruct.ap.MappingProcessor",
    date = "2024-03-12T11:26:48+0400",
    comments = "version: 1.5.5.Final, compiler: IncrementalProcessingEnvironment from gradle-language-java-8.5.jar, environment: Java 17.0.10 (Oracle Corporation)"
)
public class AccountMapperImpl extends AccountMapper {

    @Override
    public Account dtoToEntity(AccountRequest request) {
        if ( request == null ) {
            return null;
        }

        Account.AccountBuilder account = Account.builder();

        if ( request != null ) {
            account.branch( accountRequestToBranch( request ) );
        }
        if ( request != null ) {
            account.client( accountRequestToClient( request ) );
        }
        if ( request.getAmount() != null ) {
            account.amount( request.getAmount() );
        }
        if ( request.getIBAN() != null ) {
            account.IBAN( request.getIBAN() );
        }
        if ( request.getCurrencyName() != null ) {
            account.currencyName( request.getCurrencyName() );
        }
        if ( request.getAccountName() != null ) {
            account.accountName( request.getAccountName() );
        }

        return account.build();
    }

    @Override
    public void dtoToEntity(Account account, AccountRequest request) {
        if ( request == null ) {
            return;
        }

        if ( account.getBranch() == null ) {
            account.setBranch( Branch.builder().build() );
        }
        accountRequestToBranch1( request, account.getBranch() );
        if ( account.getClient() == null ) {
            account.setClient( Client.builder().build() );
        }
        accountRequestToClient1( request, account.getClient() );
        if ( request.getAmount() != null ) {
            account.setAmount( request.getAmount() );
        }
        if ( request.getIBAN() != null ) {
            account.setIBAN( request.getIBAN() );
        }
        if ( request.getCurrencyName() != null ) {
            account.setCurrencyName( request.getCurrencyName() );
        }
        if ( request.getAccountName() != null ) {
            account.setAccountName( request.getAccountName() );
        }
    }

    @Override
    public AccountResponse entityToDto(Account account) {
        if ( account == null ) {
            return null;
        }

        AccountResponse.AccountResponseBuilder accountResponse = AccountResponse.builder();

        if ( account.getBranch() != null ) {
            accountResponse.branch( branchToBranch( account.getBranch() ) );
        }
        if ( account.getClient() != null ) {
            accountResponse.client( clientToClient( account.getClient() ) );
        }
        if ( account.getAmount() != null ) {
            accountResponse.amount( account.getAmount() );
        }
        if ( account.getIBAN() != null ) {
            accountResponse.IBAN( account.getIBAN() );
        }
        if ( account.getCurrencyName() != null ) {
            accountResponse.currencyName( account.getCurrencyName() );
        }
        if ( account.getAccountName() != null ) {
            accountResponse.accountName( account.getAccountName() );
        }

        return accountResponse.build();
    }

    @Override
    public List<AccountResponse> entityListToDtoList(List<Account> accounts) {
        if ( accounts == null ) {
            return null;
        }

        List<AccountResponse> list = new ArrayList<AccountResponse>( accounts.size() );
        for ( Account account : accounts ) {
            list.add( entityToDto( account ) );
        }

        return list;
    }

    protected Branch accountRequestToBranch(AccountRequest accountRequest) {
        if ( accountRequest == null ) {
            return null;
        }

        Branch.BranchBuilder branch = Branch.builder();

        if ( accountRequest.getBranchId() != null ) {
            branch.id( accountRequest.getBranchId() );
        }

        return branch.build();
    }

    protected Client accountRequestToClient(AccountRequest accountRequest) {
        if ( accountRequest == null ) {
            return null;
        }

        Client.ClientBuilder client = Client.builder();

        if ( accountRequest.getClientId() != null ) {
            client.id( accountRequest.getClientId() );
        }

        return client.build();
    }

    protected void accountRequestToBranch1(AccountRequest accountRequest, Branch mappingTarget) {
        if ( accountRequest == null ) {
            return;
        }

        if ( accountRequest.getBranchId() != null ) {
            mappingTarget.setId( accountRequest.getBranchId() );
        }
    }

    protected void accountRequestToClient1(AccountRequest accountRequest, Client mappingTarget) {
        if ( accountRequest == null ) {
            return;
        }

        if ( accountRequest.getClientId() != null ) {
            mappingTarget.setId( accountRequest.getClientId() );
        }
    }

    protected Branch branchToBranch(Branch branch) {
        if ( branch == null ) {
            return null;
        }

        Branch.BranchBuilder branch1 = Branch.builder();

        if ( branch.getId() != null ) {
            branch1.id( branch.getId() );
        }
        if ( branch.getName() != null ) {
            branch1.name( branch.getName() );
        }
        if ( branch.getCode() != null ) {
            branch1.code( branch.getCode() );
        }
        Set<Account> set = branch.getAccounts();
        if ( set != null ) {
            branch1.accounts( new LinkedHashSet<Account>( set ) );
        }
        if ( branch.getCreatedAt() != null ) {
            branch1.createdAt( branch.getCreatedAt() );
        }
        if ( branch.getUpdatedAt() != null ) {
            branch1.updatedAt( branch.getUpdatedAt() );
        }
        branch1.status( branch.getStatus() );

        return branch1.build();
    }

    protected Client clientToClient(Client client) {
        if ( client == null ) {
            return null;
        }

        Client.ClientBuilder client1 = Client.builder();

        if ( client.getId() != null ) {
            client1.id( client.getId() );
        }
        if ( client.getName() != null ) {
            client1.name( client.getName() );
        }
        if ( client.getSurname() != null ) {
            client1.surname( client.getSurname() );
        }
        if ( client.getEmail() != null ) {
            client1.email( client.getEmail() );
        }
        if ( client.getUsername() != null ) {
            client1.username( client.getUsername() );
        }
        if ( client.getPassword() != null ) {
            client1.password( client.getPassword() );
        }
        if ( client.getBirthDate() != null ) {
            client1.birthDate( client.getBirthDate() );
        }
        Set<Account> set = client.getAccounts();
        if ( set != null ) {
            client1.accounts( new LinkedHashSet<Account>( set ) );
        }
        if ( client.getPhone() != null ) {
            client1.phone( client.getPhone() );
        }
        Set<Authority> set1 = client.getAuths();
        if ( set1 != null ) {
            client1.auths( new LinkedHashSet<Authority>( set1 ) );
        }
        if ( client.getStatus() != null ) {
            client1.status( client.getStatus() );
        }
        if ( client.getCreatedAt() != null ) {
            client1.createdAt( client.getCreatedAt() );
        }
        if ( client.getUpdatedAt() != null ) {
            client1.updatedAt( client.getUpdatedAt() );
        }

        return client1.build();
    }
}
